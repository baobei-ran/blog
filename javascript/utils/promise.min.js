/*
 * @Description: 使用 babel 把 promise 进行转换 支持在 IE 浏览器使用 
 * @Author: 清风浩明月
 * @Date: 2021-03-22 10:26:32
 * @version: 
 */
"use strict";

if (!window.Promise) {
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() { }; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // 判断变量否为function
  var isFunction = function isFunction(variable) {
    return typeof variable === 'function';
  }; // 定义Promise的三种状态常量


  var PENDING = 'PENDING';
  var FULFILLED = 'FULFILLED';
  var REJECTED = 'REJECTED';

  var Promise = /*#__PURE__*/function () {
    function Promise(handle) {
      _classCallCheck(this, Promise);

      if (!isFunction(handle)) {
        throw new Error('Promise must accept a function as a parameter');
      } // 添加状态


      this._status = PENDING; // 添加状态

      this._value = undefined; // 添加成功回调函数队列

      this._fulfilledQueues = []; // 添加失败回调函数队列

      this._rejectedQueues = []; // 执行handle

      try {
        handle(this._resolve.bind(this), this._reject.bind(this));
      } catch (err) {
        this._reject(err);
      }
    } // 添加resovle时执行的函数


    _createClass(Promise, [{
      key: "_resolve",
      value: function _resolve(val) {
        var _this = this;

        var run = function run() {
          if (_this._status !== PENDING) return;
          _this._status = FULFILLED; // 依次执行成功队列中的函数，并清空队列

          var runFulfilled = function runFulfilled(value) {
            var cb;

            while (cb = _this._fulfilledQueues.shift()) {
              cb(value);
            }
          }; // 依次执行失败队列中的函数，并清空队列


          var runRejected = function runRejected(error) {
            var cb;

            while (cb = _this._rejectedQueues.shift()) {
              cb(error);
            }
          };
          /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,
            当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态
          */


          if (val instanceof Promise) {
            val.then(function (value) {
              _this._value = value;
              runFulfilled(value);
            }, function (err) {
              _this._value = err;
              runRejected(err);
            });
          } else {
            _this._value = val;
            runFulfilled(val);
          }
        }; // 为了支持同步的Promise，这里采用异步调用


        setTimeout(run, 0);
      } // 添加reject时执行的函数

    }, {
      key: "_reject",
      value: function _reject(err) {
        var _this2 = this;

        if (this._status !== PENDING) return; // 依次执行失败队列中的函数，并清空队列

        var run = function run() {
          _this2._status = REJECTED;
          _this2._value = err;
          var cb;

          while (cb = _this2._rejectedQueues.shift()) {
            cb(err);
          }
        }; // 为了支持同步的Promise，这里采用异步调用


        setTimeout(run, 0);
      } // 添加then方法

    }, {
      key: "then",
      value: function then(onFulfilled, onRejected) {
        var _this3 = this;

        var _value = this._value,
          _status = this._status; // 返回一个新的Promise对象

        return new Promise(function (onFulfilledNext, onRejectedNext) {
          // 封装一个成功时执行的函数
          var fulfilled = function fulfilled(value) {
            try {
              if (!isFunction(onFulfilled)) {
                onFulfilledNext(value);
              } else {
                var res = onFulfilled(value);

                if (res instanceof Promise) {
                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调
                  res.then(onFulfilledNext, onRejectedNext);
                } else {
                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数
                  onFulfilledNext(res);
                }
              }
            } catch (err) {
              // 如果函数执行出错，新的Promise对象的状态为失败
              onRejectedNext(err);
            }
          }; // 封装一个失败时执行的函数


          var rejected = function rejected(error) {
            try {
              if (!isFunction(onRejected)) {
                onRejectedNext(error);
              } else {
                var res = onRejected(error);

                if (res instanceof Promise) {
                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调
                  res.then(onFulfilledNext, onRejectedNext);
                } else {
                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数
                  onFulfilledNext(res);
                }
              }
            } catch (err) {
              // 如果函数执行出错，新的Promise对象的状态为失败
              onRejectedNext(err);
            }
          };

          switch (_status) {
            // 当状态为pending时，将then方法回调函数加入执行队列等待执行
            case PENDING:
              _this3._fulfilledQueues.push(fulfilled);

              _this3._rejectedQueues.push(rejected);

              break;
            // 当状态已经改变时，立即执行对应的回调函数

            case FULFILLED:
              fulfilled(_value);
              break;

            case REJECTED:
              rejected(_value);
              break;
          }
        });
      } // 添加catch方法

    }, {
      key: "catch",
      value: function _catch(onRejected) {
        return this.then(undefined, onRejected);
      } // 添加静态resolve方法

    }, {
      key: "finally",
      value: function _finally(cb) {
        return this.then(function (value) {
          return Promise.resolve(cb()).then(function () {
            return value;
          });
        }, function (reason) {
          return Promise.resolve(cb()).then(function () {
            throw reason;
          });
        });
      }
    }], [{
      key: "resolve",
      value: function resolve(value) {
        // 如果参数是MyPromise实例，直接返回这个实例
        if (value instanceof Promise) return value;
        return new Promise(function (resolve) {
          return resolve(value);
        });
      } // 添加静态reject方法

    }, {
      key: "reject",
      value: function reject(value) {
        return new Promise(function (resolve, reject) {
          return reject(value);
        });
      } // 添加静态all方法

    }, {
      key: "all",
      value: function all(list) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          /**
           * 返回值的集合
           */
          var values = [];
          var count = 0;

          var _iterator = _createForOfIteratorHelper(list.entries()),
            _step;

          try {
            var _loop = function _loop() {
              var _step$value = _slicedToArray(_step.value, 2),
                i = _step$value[0],
                p = _step$value[1];

              // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve
              _this4.resolve(p).then(function (res) {
                values[i] = res;
                count++; // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled

                if (count === list.length) resolve(values);
              }, function (err) {
                // 有一个被rejected时返回的MyPromise状态就变成rejected
                reject(err);
              });
            };

            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              _loop();
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      } // 添加静态race方法

    }, {
      key: "race",
      value: function race(list) {
        var _this5 = this;

        return new Promise(function (resolve, reject) {
          var _iterator2 = _createForOfIteratorHelper(list),
            _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var p = _step2.value;

              // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变
              _this5.resolve(p).then(function (res) {
                resolve(res);
              }, function (err) {
                reject(err);
              });
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        });
      }
    }]);

    return Promise;
  }();
  window.Promise = Promise;
}